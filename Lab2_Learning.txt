------------------------------ TASK 1 -----------------------------------

li x19, 0x10000000 #loading address in x19
li x20, 0xdeadbeef 

# Memory[x19 + 0] = x20
sw x20, 0(x19) #storing 0xdeadbeef at memory location 0x10000000

# Now reading again from memory
# x21 = Memory[x19 + 0]
lw x21, 0(x19) #reading into x21 from address 0x10000000

------------------------------ TASK 2 -----------------------------------

# .asciiz stores the string in the null-terminated format
# labels are treated same as goto statement in c++
# for reference in assembly directives visit(https://michaeljclark.github.io/asm.html)

.data
label1:
.asciiz "Hello"  #Every character takes 8bits

.text
main : # labels are being treated as goto statement in c++
la x11, label1
label2: 
li, x3, 123
beq x0, x0, exit
j main
exit:

------------------------------ TASK 3 -----------------------------------

# when constant smaller than 12 bits are used
addi x20, x20, 0xbc 

# when constant larger than 12 bits are used addi throws an error
# addi x20, x20, 0xabcd

# when constant smaller than 12 bits are used for loading
li x21, 0xbc

# when constant greater than 12 bits are used for loading
# then li internally uses lui
li x22, 0xabcd

------------------------------ TASK 4 -----------------------------------

# .word directive is used to fill memory beforehand
--------
.data
var1: .word 10 #here word assigns 32bit of memory( 4 bytes )
var2: .word 20
-------- # this code stores 10 and 20 at 0x10000000 , 0x10000004 respectively

--------
.data
.word 10
.word 20
.word 30
.word 40
.word 50
.word 60
-------- #similarly this code stores elements starting from 0x10000000 (like an array)

--------
.data
var1: .word 10
var2: .word 20

.text
lw x1, var1 #directly data can acessed by using label name and using load word instruction
lw x2, var2 
add x3, x2, x1
--------

--------
.data
array :
.word 10
.word 20

.text
la x20, array #similarly directly address can acessed and stored by using label name and using load address instruction
--------

--------
var1: .byte 10 #assigns 1 byte(8 bits of memory)
var2: .byte 20
var3: .byte 0xffffffff # now it will only read the first byte(or 8 bits)

.text
lw x1, var1
lw x2, var2
add x3, x2, x1
--------

------------------------------ TASK 5 -----------------------------------

--------
.data
i: .word 4
j: .word 4
g: .word 10
h: .word 4

.text
#loading data
lw x19, i
lw x20, j
#x21 will be used as f
lw x22, g
lw x23, h
#main logic part
bne x19, x20, else
add x21, x22, x23
beq x0, x0, exit
else:
sub x21, x22, x23
exit:
--------

------------------------------ TASK 6 -----------------------------------

# Realizing a ‘switch’ statement in RISC-V : Part I
# Assume that there is a switch statement with three possible cases other than default. Write
# a RISC-V code to realize this switch.

# switch(y){
# 	case1 val1: //some code
#   case2: //some code
#   case3: //some code
# 	default://some code
# }

.data
y : .word 40
val1 : .word 30
val2 : .word 20
val3 : .word 40

.text
lw x19, y
lw x21, val1 #temp variable of case1
lw x22, val2 #temp variable of case2
lw x23, val3 #temp variable of case3
li x24, 0 #temp variable to check code

beq x19, x21, case1
beq x19, x22, case2
beq x19, x23, case3
beq x0, x0, default
case1:
addi x24, x21, 0
beq x0, x0, exit
case2:
addi x24, x22, 0
beq x0, x0, exit
case3:
addi x24, x23, 0
beq x0, x0, exit
default:
li x24, 100
exit:

------------------------------ TASK 7 -----------------------------------

-------- #A
.data
array:
.word 7 # lowest memory
.word 1
.word 12
.word 11
.word 49
.word -22
.word -34
.word 32
.word -42
.word -3 # highest memory

.text
la x10, array # loading base address of array

#to access element arr[i]
# lw var, 4*i(x10) // var = memory[x10 + 4*i]

li x19, 0 # sum // initializing the sum to zero
li x20, 0 # counter // initializing counter to zero
addi x18, x10, 0 #copy of base address
li x21, 10 # constant # total number of elements in the array
li x22, 0 # temp variable

j loop

loop:
beq x20, x21, exit # break loop if counter equals 10
lw x22, 0(x18) # x22 - arr[i] # loading current element in x22
add x19, x19, x22 # sum += arr[i]
addi x18, x18, 4 # i += 1
addi x20, x20, 1 # counter += 1
beq x0, x0, loop
exit:
--------


--------#B/C/E
.data
array:
.word 7 # lowest memory
.word 1
.word 12
.word 11
.word 49
.word -22
.word -34
.word 32
.word -42
.word -3 # highest memory

.text
la x10, array # loading base address of array

#to access element arr[i]
# lw var, 4*i(x10) // var = memory[x10 + 4*i]

li x19, 0 # sum // initializing the sum to zero
li x20, 0 # counter // initializing counter to zero
addi x18, x10, 0 #copy of base address
li x21, 10 # constant # total number of elements in the array
li x22, 0 # temp variable

li x23, 6 # constant
li x24, 40 # constant
li x25, 1 #constant
li x26, 35 #constant

j loop

loop:
beq x20, x21, exit # break loop if counter equals 10
lw x22, 0(x18) # x22 - arr[i] # loading current element in x22
# TASK 7E - bltu x22, x26, continue # branch if arr[i] < 35 (unsigned)
# TASK 7C - bge x22, x24, continue # branch if arr[i] >= 40
# TAKS 7C - blt x22, x25, continue # branch if arr[i] < 1
# TASK 7B - blt x22, x23, continue # branch if arr[i] < 6
add x19, x19, x22 # sum += arr[i]
# TASK 7B/7C/7E - continue:
addi x18, x18, 4 # i += 1
addi x20, x20, 1 # counter += 1
beq x0, x0, loop
exit:
--------

------------------------------ TASK 8 -----------------------------------

'for', 'while', 'do-while' are almost same as the loop used in TASK 7

------------------------------ TASK 9 -----------------------------------

.data
num : .word 0x0f0ff00f

.text
lw x19, num # number whose bits are need to be counted.
li x20, 0 # storing the final ans
li x21, 0  # counter variable
li x22, 2 # constant
li x23, 32 # constant
li x24, 0 #variable

j loop
# Count number of ones assuming binary representation
loop:
beq x21, x23, exit # if counter == 32 break
rem x24, x19, x22 # rem(x24) = num%2
add x20, x20, x24 # ans += rem
srli x19, x19, 1    # Logical Right Shift # First bits become zero
addi x21, x21, 1    # Incrementing the counnter 
beq x0, x0, loop
exit:
# final ans x20

------------------------------ TASK 10 -----------------------------------





