-------------------- TASK 1 --------------------------
-----
.data 
.word 0xdeadbeef
-----
-------------------- TASK 2 --------------------------
-------------------- TASK 3 --------------------------
-------------------- TASK 4 --------------------------
-------------------- TASK 5 --------------------------

5% - 7 theory assignements (pick best 4) 
10% - 7 quizzes (pick best 5)
5% - 4 lab assignments (pick 3)
10% - 2 lab tests
10% - 1 lab project
25% - 1 mid term exam
35% - 1 end term exam


-------------------- TASK 7 --------------------------

-------------------- TASK 6 --------------------------

.data
num1 : .word 0x0f0000ff
num2 : .word 0x0000ff0f
len : .word 32

.text
la x5, num1 #num1
la x6, num2 #num2
lw x10, len #length to be compared
li x11, 0 # will store final number of mismatch in num1 and num2

jal x1, memcmp
beq x0, x0, exit

# main procedure
memcmp:
lw x26, 0(x5) # loading num1
lw x27, 0(x6) # loading num2
xor x19, x26, x27 # num1^num2
addi sp, sp, -4
sw x1, 0(sp) # saving return address for main procedure

#calling helper function
jal x1, count 

lw x1, 0(sp) # retrieving return address for main procedure
addi sp, sp, 4 
jalr x0, x1, 0 # return from main procedure
#--- # end of main procedure


#procedure to count number of ones
count:
# x19 is the number whose bits needs to be counted
li x21, 2 #constant
li x22, 0 #tmp variable
li x23, 0 #counter variable
loop:
beq x23, x10, endloop
rem x22, x19, x21 # x22 = x19 REM x21 ( x22 = x19 % 2 )
add x11, x11, x22 # ans += x22
srli x19, x19, 1    # Logical Right Shift # First bits become zero
addi x23, x23, 1
beq x0, x0, loop
endloop:
jalr x0, x1, 0
#--- # end of main procedure
exit:

-------------------- TASK 8 --------------------------
# long long int fact (long long int n){
#     if (n < 1) return (1);
#     else return (n * fact(n -1));
# }
.data 
n : .word 10

.text
lw x10, n 
li x19, 1 # constant

jal x1, fact
beq x0, x0, exit

# factorial procedure
fact:
addi sp, sp, -8 
sw x10, 0(sp) # saving current n on the stack
sw x1, 4(sp) # saving current return address on the stack
bgt x10, x19, else # branch if x10 > x19 ( n > 1 )
# base case
addi sp, sp, 8 
jalr x0, x1, 0
else: 
# recursion
addi x10, x10, -1
jal x1, fact
# coming back after recursing through smaller n's
lw x20, 0(sp) # retrieving current n from the stack # x20 = n
lw x1, 4(sp) # retrieving current return address from the stack
addi sp, sp, 8
mul x10, x10, x20 # currans = prevans*n
jalr x0, x1, 0
exit:
# final result stored in x10
